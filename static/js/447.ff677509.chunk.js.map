{"version":3,"file":"static/js/447.ff677509.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://phonebook/./src/components/App.module.css?6c4d","webpack://phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"wrapper\":\"ContactForm_wrapper__-Umw-\"};","export const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\n// import { addContact, getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Notify } from 'notiflix';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n    const checkContact = contacts.find(contact => contact.name === name);\n    if (checkContact) {\n      alert('Already in Contacts');\n      return;\n    }\n    const newContact = {\n      name: name,\n      number: number,\n      id: nanoid(),\n    };\n\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <div className={css.container}>\n      <form className={css.form} onSubmit={onFormSubmit}>\n        <h1>PhoneBook</h1>\n        <div className=\"wrapper\">\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <button type=\"submit\">Add Contact</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"App_container__ZdBeZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"item\":\"ContactsList_item__6gc1x\",\"btn\":\"ContactsList_btn__GccuV\"};","// import PropTypes from 'prop-types';\nimport css from './ContactsList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const setFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  return (\n    <>\n      <ul className={css.list}>\n        {setFilteredContacts().map(({ id, name, number }) => (\n          <li className={css.item} key={id}>\n            {name}: {number}\n            <button\n              className={css.btn}\n              onClick={() => dispatch(deleteContact(id))}\n              type=\"button\"\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\",\"title\":\"Filter_title__pSkfx\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <>\n      <h2 className={css.title}>Contacts</h2>\n      <label className={css.label}>\n        Enter search query\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.target.value))}\n        />\n      </label>\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport css from 'components/App.module.css';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectLoading,\n} from 'redux/contacts/selectors';\n\nconst ContactPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoggedIn && (\n        <div className={css.container}>\n          <h1>Phonebook</h1>\n          <ContactForm />\n          {contacts.length > 0 ? (\n            <>\n              {/* <h2>Contacts</h2> */}\n              <Filter />\n              <ContactsList />\n            </>\n          ) : (\n            <h1>Contacts list is empty yet</h1>\n          )}\n          {isLoading && <Loader />}\n          {error && <h1>{error}</h1>}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ContactPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","selectLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","name","target","elements","value","number","find","contact","alert","newContact","addContact","reset","type","pattern","title","required","ContactsList","toLowerCase","includes","map","onClick","deleteContact","Filter","onChange","filterContacts","isLoggedIn","auth","useEffect","fetchContacts","length","Loader"],"sourceRoot":""}